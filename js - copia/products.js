// =============================================================
// ‚úÖ products.js ‚Äî cat√°logo general del sitio Importadora Inka
// =============================================================
// Versi√≥n PRO: con protecci√≥n de dependencias y carga segura
// Evita fallos si helpers a√∫n no est√° cargado o si se cambia el orden de scripts.

console.log("üì¶ products.js cargando...");

window.CURRENT_MODE = "all"; // modo global del cat√°logo (all/category/search)
window.productsPage = 1;     // control de paginaci√≥n global

// üîß Esperar a que helpers est√© disponible antes de ejecutar
async function waitForHelpers() {
  return new Promise(resolve => {
    const check = () => {
      if (window.helpers && window.CONFIG) {
        console.log("‚úÖ Dependencias disponibles (CONFIG + helpers)");
        return resolve(true);
      }
      setTimeout(check, 50); // revisa cada 50ms
    };
    check();
  });
}

// =============================================================
// üì¶ Cargar productos del cat√°logo general (sin categor√≠a activa)
// =============================================================
async function cargarProducts(page = 1, limit = 20, append = false, mode = "all") {
  console.log(`üîÑ cargarProducts llamado: page=${page}, append=${append}, mode=${mode}`);
  
  await waitForHelpers(); // üîê asegura que helpers est√© disponible

  // Si est√° activo el modo categor√≠a o b√∫squeda, ignorar carga general
  if (window.CURRENT_MODE === "category") {
    console.log("‚è© Omitiendo carga general (modo categor√≠a activo)");
    return;
  }

  if (window.CURRENT_MODE === "search") {
    console.log("‚è© Omitiendo carga general (modo b√∫squeda activo)");
    return;
  }

  const grid = document.getElementById("products-container");
  if (!grid) {
    console.warn("‚ö†Ô∏è Grid 'products-container' no encontrado");
    return;
  }

  console.log("‚úÖ Grid encontrado:", grid);

  try {
    const url = `${CONFIG.apiURL}products.php?page=${page}&limit=${limit}`;
    console.log(`üì° Fetching: ${url}`);
    
    const res = await fetch(url);
    console.log(`üì• Response status: ${res.status}`);
    
    if (!res.ok) throw new Error(`HTTP ${res.status}`);
    
    const data = await res.json();
    console.log("üì¶ Data recibida:", data);

    if (data.status !== "ok" || !data.productos) {
      throw new Error("Respuesta inv√°lida de la API");
    }

    console.log(`‚úÖ ${data.productos.length} productos recibidos de ${data.total} totales`);

    // Renderizar productos en el grid
    helpers.renderProducts(data.productos, append);

    // Controlar visibilidad del bot√≥n "Cargar m√°s"
    const loadMoreBtn = document.getElementById("load-more");
    if (loadMoreBtn) {
      if (page >= data.total_paginas) {
        loadMoreBtn.style.display = "none";
        console.log("üîí Bot√≥n 'Cargar m√°s' oculto (√∫ltima p√°gina)");
      } else {
        loadMoreBtn.style.display = "inline-block";
        console.log(`‚úÖ Bot√≥n "Cargar m√°s" visible (p√°gina ${page} de ${data.total_paginas})`);
      }
    }

  } catch (e) {
    console.error("‚ùå Error cargando productos:", e);
    grid.innerHTML = `<div class="col-12 text-center text-danger py-4">Error cargando productos: ${e.message}</div>`;
  }
}

// =============================================================
// üîò Vincular bot√≥n "Cargar m√°s" para cat√°logo general
// =============================================================
function bindLoadMoreForAll() {
  console.log("üîó bindLoadMoreForAll: Vinculando bot√≥n para modo ALL...");
  
  const btn = document.getElementById("load-more");
  if (!btn) {
    console.warn("‚ö†Ô∏è Bot√≥n 'load-more' no encontrado");
    return;
  }

  // ‚ö†Ô∏è NO clonar el bot√≥n - usar dataset para controlar el modo
  btn.dataset.boundMode = "all";

  // Remover listener anterior si existe
  if (btn._clickHandler) {
    btn.removeEventListener("click", btn._clickHandler);
  }

  // Crear nuevo handler
  btn._clickHandler = () => {
    console.log(`üñ±Ô∏è Click en "Cargar m√°s" (modo actual: ${window.CURRENT_MODE}, bound: ${btn.dataset.boundMode})`);
    
    if (window.CURRENT_MODE !== "all") {
      console.log(`‚è© Ignorado por products.js (modo actual: ${window.CURRENT_MODE})`);
      return;
    }

    window.productsPage = (window.productsPage || 1) + 1;
    console.log(`üìÑ Cargando p√°gina ${window.productsPage}...`);
    cargarProducts(window.productsPage, 20, true);
  };

  btn.addEventListener("click", btn._clickHandler);
  console.log("‚úÖ Bot√≥n vinculado para modo ALL");
}

// =============================================================
// üöÄ Inicializaci√≥n autom√°tica del cat√°logo
// =============================================================
async function initProducts() {
  console.log("üöÄ products.js: Iniciando...");
  
  await waitForHelpers(); // Asegura que helpers existe antes de iniciar
  
  console.log("üîó Vinculando eventos...");
  bindLoadMoreForAll();   // vincula bot√≥n "Cargar m√°s"
  
  // ‚ö†Ô∏è IMPORTANTE: Solo cargar productos si NO hay par√°metro multi en la URL
  const urlParams = new URLSearchParams(window.location.search);
  const multiParam = urlParams.get('multi');
  const catParam = urlParams.get('cat');
  
  if (multiParam) {
    console.log("‚è© Par√°metro 'multi' detectado, omitiendo carga inicial de productos");
    console.log("   globalSearch.js se encargar√° de mostrar los resultados");
    window.CURRENT_MODE = "search";
    return;
  }

  if (catParam) {
    console.log("‚è© Par√°metro 'cat' detectado, omitiendo carga inicial de productos");
    console.log("   productsByCategories.js se encargar√° de mostrar los resultados");
    window.CURRENT_MODE = "category";
    return;
  }
  
  console.log("üì¶ Cargando productos iniciales...");
  window.CURRENT_MODE = "all";
  cargarProducts(1, 20, false);
}

// Inicializar cuando el DOM est√© listo
document.addEventListener("DOMContentLoaded", initProducts);

// Tambi√©n inicializar en window.load por si DOMContentLoaded ya pas√≥
window.addEventListener("load", () => {
  console.log("üé¨ Window load completo, iniciando products.js...");
  if (window.CURRENT_MODE === "all" && !new URLSearchParams(window.location.search).get('multi')) {
    // Solo inicializar si no se ha hecho ya
    if (!document.querySelector("#products-container .block2")) {
      initProducts();
    }
  }
});

// Exportar por compatibilidad global
window.bindLoadMoreForAll = bindLoadMoreForAll;
window.cargarProducts = cargarProducts;

console.log("‚úÖ products.js cargado correctamente");